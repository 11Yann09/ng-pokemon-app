{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { POKEMONS } from \"./mock-pokemon-list\";\nexport let PokemonService = class PokemonService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPokemonList() {\n    return POKEMONS;\n  }\n  getPokemonById(pokemonId) {\n    return POKEMONS.find(pokemon => pokemon.id == pokemonId);\n  }\n  getPokemonTypeListe() {\n    return [\"Plante\", \"Feu\", \"Eau\", \"Insecte\", \"Normal\", \"Electrik\", \"Poison\", \"Fée\", \"Vol\", \"Combat\", \"Psy\"];\n  }\n};\nPokemonService = __decorate([Injectable()], PokemonService);","map":{"version":3,"names":["Injectable","POKEMONS","PokemonService","constructor","http","getPokemonList","getPokemonById","pokemonId","find","pokemon","id","getPokemonTypeListe","__decorate"],"sources":["C:\\Users\\YANN\\Dev\\ng-pokemon-app\\src\\app\\pokemon\\pokemon.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Pokemon } from \"./pokemon\";\nimport { POKEMONS } from \"./mock-pokemon-list\";\n\n@Injectable()\nexport class PokemonService {\n\n  constructor (private http: Http) {\n\n  }\n\n  getPokemonList(): Pokemon[] {\n    return POKEMONS;\n  }\n\n  getPokemonById(pokemonId: number): Pokemon | undefined {\n    return POKEMONS.find((pokemon) => pokemon.id == pokemonId);\n  }\n\n  getPokemonTypeListe(): string[] {\n    return [\n      \"Plante\",\n      \"Feu\",\n      \"Eau\",\n      \"Insecte\",\n      \"Normal\",\n      \"Electrik\",\n      \"Poison\",\n      \"Fée\",\n      \"Vol\",\n      \"Combat\",\n      \"Psy\",\n    ];\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,QAAQ,QAAQ,qBAAqB;AAGvC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAEzBC,YAAqBC,IAAU;IAAV,KAAAA,IAAI,GAAJA,IAAI;EAEzB;EAEAC,cAAcA,CAAA;IACZ,OAAOJ,QAAQ;EACjB;EAEAK,cAAcA,CAACC,SAAiB;IAC9B,OAAON,QAAQ,CAACO,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAE,IAAIH,SAAS,CAAC;EAC5D;EAEAI,mBAAmBA,CAAA;IACjB,OAAO,CACL,QAAQ,EACR,KAAK,EACL,KAAK,EACL,SAAS,EACT,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,KAAK,EACL,KAAK,EACL,QAAQ,EACR,KAAK,CACN;EACH;CACD;AA7BYT,cAAc,GAAAU,UAAA,EAD1BZ,UAAU,EAAE,C,EACAE,cAAc,CA6B1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}