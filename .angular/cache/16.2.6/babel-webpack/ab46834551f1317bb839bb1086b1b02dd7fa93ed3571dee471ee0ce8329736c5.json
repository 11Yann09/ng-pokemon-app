{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, Observable, of, tap } from \"rxjs\";\nimport { Pokemon } from \"./pokemon\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PokemonService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPokemonList() {\n    return this.http.get(\"api/pokemons\").pipe(tap(response => this.log(response)), catchError(error => this.HandleError(error, [])));\n  }\n  getPokemonById(pokemonId) {\n    return this.http.get(`api/pokemons/${pokemonId}`).pipe(tap(response => this.log(response)), catchError(error => this.HandleError(error, undefined)));\n  }\n  updatePokemon(pokemon) {\n    updatePokemon(pokemon, Pokemon);\n    Observable < Pokemon > {\n      const: httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      },\n      return: this.http.put('api/pokemons', pokemon, httpOptions).pipe(tap(response => this.log(response)), catchError(error => this.HandleError(error, undefined)))\n    };\n  }\n  log(response) {\n    console.log(response);\n  }\n  HandleError(error, errorValue) {\n    console.log(error);\n    return of(errorValue);\n  }\n  getPokemonTypeListe() {\n    return [\"Plante\", \"Feu\", \"Eau\", \"Insecte\", \"Normal\", \"Electrik\", \"Poison\", \"Fée\", \"Vol\", \"Combat\", \"Psy\"];\n  }\n  static #_ = this.ɵfac = function PokemonService_Factory(t) {\n    return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonService,\n    factory: PokemonService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","Observable","of","tap","Pokemon","PokemonService","constructor","http","getPokemonList","get","pipe","response","log","error","HandleError","getPokemonById","pokemonId","undefined","updatePokemon","pokemon","const","httpOptions","headers","return","put","console","errorValue","getPokemonTypeListe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\YANN\\Dev\\ng-pokemon-app\\src\\app\\pokemon\\pokemon.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, Observable, of, tap } from \"rxjs\";\nimport { Pokemon } from \"./pokemon\";\n\n@Injectable()\nexport class PokemonService {\n  constructor(private http: HttpClient) {}\n\n  getPokemonList(): Observable<Pokemon[]> {\n    return this.http.get<Pokemon[]>(\"api/pokemons\").pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.HandleError(error, []))\n    );\n  }\n\n  getPokemonById(pokemonId: number): Observable<Pokemon | undefined> {\n    return this.http.get<Pokemon>(`api/pokemons/${pokemonId}`).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.HandleError(error, undefined))\n    );\n  }\n\n  updatePokemon(pokemon: Pokemon): Observable<Pokemon> {\n    updatePokemon(pokemon: Pokemon): Observable<Pokemon> {\n    \tconst httpOptions = {\n        headers: new HttpHeaders ({ 'Content-Type': 'application/json' })\n      };\n\n      return this.http.put('api/pokemons', pokemon, httpOptions).pipe(\n        tap((response) => this.log(response)),\n        catchError((error) => this.HandleError(error, undefined))\n      );\n  }\n\n  private log(response: Pokemon[] | Pokemon | undefined) {\n    console.log(response);\n  }\n\n  private HandleError(error: Error, errorValue: any) {\n    console.log(error);\n    return of(errorValue);\n  }\n\n  getPokemonTypeListe(): string[] {\n    return [\n      \"Plante\",\n      \"Feu\",\n      \"Eau\",\n      \"Insecte\",\n      \"Normal\",\n      \"Electrik\",\n      \"Poison\",\n      \"Fée\",\n      \"Vol\",\n      \"Combat\",\n      \"Psy\",\n    ];\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,EAAEC,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;AACtD,SAASC,OAAO,QAAQ,WAAW;;;AAGnC,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,cAAc,CAAC,CAACC,IAAI,CAClDP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCX,UAAU,CAAEa,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,EAAE,CAAC,CAAC,CACnD;EACH;EAEAE,cAAcA,CAACC,SAAiB;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACE,GAAG,CAAU,gBAAgBO,SAAS,EAAE,CAAC,CAACN,IAAI,CAC7DP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCX,UAAU,CAAEa,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEI,SAAS,CAAC,CAAC,CAC1D;EACH;EAEAC,aAAaA,CAACC,OAAgB;IAC5BD,aAAa,CAACC,OAAO,EAAEf,OAAO,CAAC;IAAEH,UAAU,GAACG,OAAO,GAAE;MACpDgB,KAAK,EAACC,WAAW,GAAG;QACjBC,OAAO,EAAE,IAAIvB,WAAW,CAAE;UAAE,cAAc,EAAE;QAAkB,CAAE;OACjE;MAEDwB,MAAM,EAAC,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAC,cAAc,EAAEL,OAAO,EAAEE,WAAW,CAAC,CAACX,IAAI,CAC7DP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCX,UAAU,CAAEa,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEI,SAAS,CAAC,CAAC;KAE9D;EAED;EAAQL,GAAGA,CAACD,QAAyC;IACnDc,OAAO,CAACb,GAAG,CAACD,QAAQ,CAAC;EACvB;EAEQG,WAAWA,CAACD,KAAY,EAAEa,UAAe;IAC/CD,OAAO,CAACb,GAAG,CAACC,KAAK,CAAC;IAClB,OAAOX,EAAE,CAACwB,UAAU,CAAC;EACvB;EAEAC,mBAAmBA,CAAA;IACjB,OAAO,CACL,QAAQ,EACR,KAAK,EACL,KAAK,EACL,SAAS,EACT,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,KAAK,EACL,KAAK,EACL,QAAQ,EACR,KAAK,CACN;EACH;EAAC,QAAAC,CAAA,G;qBApDUvB,cAAc,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd5B,cAAc;IAAA6B,OAAA,EAAd7B,cAAc,CAAA8B;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}